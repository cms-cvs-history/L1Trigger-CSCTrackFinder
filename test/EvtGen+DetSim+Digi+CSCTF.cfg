process PROD  = {
   # initialize  MessageLogger
   include "FWCore/MessageService/data/MessageLogger.cfi"

   service = Timing {}


   service = RandomNumberGeneratorService
   {
      untracked uint32 sourceSeed = 135799753
      PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 123456789
         untracked uint32 g4SimHits = 9876
      }
   }
   
   include "SimGeneral/HepPDTESSource/data/pdt.cfi"


   # NOTE : if one wants to run with the SiStripDigitizer,
   #        then mag.field in the OscarProducer should be
   #        turned ON; otherwise it gets (re)created by the
   #        SiStripDigitizer, which seems to corrupt at all
   #        the edm::Event record


   # Step 1 : Event Generation

   # flat random E-gun, single muon
   #
   # if you want another particle type, replace the PartID
   # (standard STDHEP numbering scheme)
   #
   # to run it along with CMS detector simulation
   # (OscarProducer) make sure to select QGSP physics
   # list, instead DummyPhysics ("Dummy" has only EM
   # process and wont know to model interactions of
   # hadrons with matter)
   #
   source = FlatRandomPtGunSource
   {
      untracked int32 maxEvents = 10
      untracked PSet PGunParameters =
      {
         # you can request more than 1 particle
         #untracked vint32  PartID = {211,11}
         untracked vint32 PartID = { 13 }
         untracked double MinEta = .9
         untracked double MaxEta = 1.2
         untracked double MinPhi = -3.14159265358979323846 # must be in radians
         untracked double MaxPhi =  3.14159265358979323846
         untracked double MinPt  = 149.99
         untracked double MaxPt  = 150.01
      }
      untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
   }

   # step 2 :
   # event vertex smearing - applies only once (internal check)
   # Note : all internal generatoes will always do (0,0,0) vertex
   #
   include "IOMC/EventVertexGenerators/data/VtxSmearedGauss.cfi"
   
   # steps 3,4 :
   # G4 detector simulation and digitization
   #
   include "SimG4Core/Application/data/SIM-DIGI.cff"

   # csc trigger primitives
   #=======================
   include "L1Trigger/CSCTriggerPrimitives/data/CSCTriggerPrimitivesProducer.cfi"

   # csc trackfinder
   #================
   include "L1Trigger/CSCTrackFinder/data/CSCTrackFinder.cfi"

   # dt trigger primitives
   #======================
   module trigprod = DTTrigProd{
        			untracked double syncDelay           = 500
        			untracked bool   globalSync          = false
        			include "L1Trigger/DTTrigger/data/DTTrigSync.cfi"
        			untracked bool   DTTFSectorNumbering = true
        		       }   
 
   # dt trackfinder
   #===============
   module DTTrackFinder = DTTrackFinder{
          			        untracked string lutdir ="/afs/hep.wisc.edu/user/lgray/CMSSW_1_1_2/src/L1Trigger/DTTrackFinder/parameters/"
        			       }

   # Step 4 : Output module
   #
   module GEN-SIM-DIGI = PoolOutputModule
   {
      untracked string fileName = "test_trackfinders.root"
	untracked vstring outputCommands =
                {
                        "keep *",
                        "drop *_ecalUnsuppressedDigis_*_*",
                        "drop *_hcalDigis_*_*",
			"drop *_siStripDigis_*_*",
			"drop *_muonCSCDigis_*_*",
			"drop *_muonDTDigis_*_*",
			"drop *_muonRPCDigis_*_*",
			"drop *_siPixelDigis_*_*",
                        "drop PSimHits_*_*_*",
                        "drop PCaloHits_*_*_*"
                }      
   }
   
   # Now order modules for execution
   #
   sequence trDigi = {  siPixelDigis & siStripDigis }
   sequence calDigi = { ecalUnsuppressedDigis & hcalDigis }
   sequence muonDigi = { muonCSCDigis &  muonDTDigis & muonRPCDigis}
   sequence doDigi = { trDigi & calDigi & muonDigi }
   sequence doTriggerPrimitives = { lctproducer, trigprod }
   sequence doTrackFinders = { csc_tf_cands, DTTrackFinder }
   path p1 = { VtxSmeared, g4SimHits, mix, doDigi, doTriggerPrimitives, doTrackFinders }
   endpath outpath = { GEN-SIM-DIGI }

}
