process TEST = {
    service = MessageLogger {
      untracked vstring destinations = { "cout", "cerr"  }
      untracked PSet cout = { untracked string threshold = "INFO"    }
      untracked PSet cerr = { untracked string threshold = "WARNING" }
      untracked vstring debugModules   = { "*" }
    }

   untracked PSet maxEvents = {untracked int32 input = -1}

   source = PoolSource {
      untracked vstring fileNames = {
'file:/tmp/kkotov/sim_dy/dy_170pre12_lx201.root',
'file:/tmp/kkotov/sim_dy/dy_170pre12_lx202.root',
'file:/tmp/kkotov/sim_dy/dy_170pre12_lx203.root',
'file:/tmp/kkotov/sim_dy/dy_170pre12_lx204.root',
'file:/tmp/kkotov/sim_dy/dy_170pre12_lx205.root',
'file:/tmp/kkotov/sim_dy/dy_170pre12_lx206.root',
'file:/tmp/kkotov/sim_dy/dy_170pre12_lx207.root',
'file:/tmp/kkotov/sim_dy/dy_170pre12_lx208.root',
'file:/tmp/kkotov/sim_dy/dy_170pre12_lx209.root'
}
   }

   # es_source of ideal geometry
   # ===========================
   # endcap muon only...
   #include "Geometry/MuonCommonData/data/muonEndcapIdealGeometryXML.cfi"
   include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"

   # flags for modelling of CSC geometry
   # ===================================
   include "Geometry/CSCGeometry/data/cscGeometry.cfi"

   # magnetic field (do I need it?)
   # ==============================
   #include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

   # csc trigger primitives
   #=======================
   include "L1TriggerConfig/L1CSCTPConfigProducers/data/L1CSCTriggerPrimitivesConfig.cff"
   include "L1Trigger/CSCTriggerPrimitives/data/CSCTriggerPrimitivesProducer.cfi"

   # csc trackfinder
   #================
   include "L1Trigger/CSCTrackFinder/data/CSCTrackFinder.cfi"

   replace l1csctracks.SectorReceiverInput = cscTriggerPrimitiveDigis:MPCSORTED

   # dt trigger primitives
   #======================
   include "Geometry/DTGeometry/data/dtGeometry.cfi"
   include "L1TriggerConfig/DTTPGConfigProducers/data/L1DTTPGConfig.cff"
   include "L1Trigger/DTTrigger/data/dtTriggerPrimitiveDigis.cfi"

   # dt trackfinder
   #===============
   module DTTrackFinder = DTTrackFinder{
          			        untracked string lutdir ="/afs/hep.wisc.edu/user/lgray/CMSSW_1_1_2/src/L1Trigger/DTTrackFinder/parameters/"
        			       }

   # LUTs' producer (populates EventSetup)
   include "L1TriggerConfig/CSCTFConfigProducers/data/CSCTFConfigProducer.cfi"

   include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi"

#   # MESSAGE LOGGER
#   #===============
#   service = MessageLogger {
#      untracked vstring destinations = { "log.txt", "debug.txt", "errors.txt" }
#      untracked vstring statistics = { "statistics.txt" }
#
## Constrain log.txt to LogInfo output...
###      untracked PSet log.txt = { untracked string threshold = "INFO" }
#
## No constraint on log.txt content...
#      untracked PSet log.txt = { untracked int32 lineLength = 132
#                       untracked bool noLineBreaks = true
#                     }
#
#      untracked PSet debug.txt = { untracked string threshold = "DEBUG"
#                        untracked int32 lineLength = 132
#                        untracked bool noLineBreaks = false
#                       }
#
#      untracked PSet errors.txt = { untracked string threshold = "ERROR" }
#
#      untracked PSet statistics.txt = { untracked string threshold = "INFO" }
#
## turn on the following to get LogDebug output
## ============================================
##      untracked vstring debugModules = {  "*"  }
#      untracked vstring debugModules = { "l1csctracks","csctfmuonsorter" }
#   }

   # Output module
   module GEN-SIM-DIGI = PoolOutputModule
   {
      untracked string fileName = "/tmp/kkotov/trackfinders.root"
	untracked vstring outputCommands =
                {
                        "keep *"
#                        "drop *",
#			"keep *_muonCSCDigis_*_*",
#			"keep *_muonDTDigis_*_*",
#			"keep *_muonRPCDigis_*_*",
#			"keep *_L1CSCTrackCollection_*_*"
                }
   }

   sequence muonDigi = { muonCSCDigis &  muonDTDigis & muonRPCDigis}
#   sequence doTrackFinders = { csc_tf_cands, DTTrackFinder }

#   path p = {lctproducer, dtTriggerPrimitiveDigis, csc_tf_cands}
   path p = {cscTriggerPrimitiveDigis, dtTriggerPrimitiveDigis, csc_sp_tracks}

   endpath outpath = { GEN-SIM-DIGI }

}
